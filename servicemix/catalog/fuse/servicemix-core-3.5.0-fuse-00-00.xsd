<?xml version="1.0" encoding="UTF-8"?><!-- NOTE: this file is autogenerated by Apache XBean --><xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://servicemix.apache.org/config/1.0" elementFormDefault="qualified" targetNamespace="http://servicemix.apache.org/config/1.0">

  <!-- element for type: org.apache.servicemix.jbi.container.ActivationSpec -->
  <xs:element name="activationSpec">
    <xs:annotation>
      <xs:documentation>
        The Component
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="component" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="destinationResolver" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Returns the destination resolver used to decide which destination the
container should route this component to.
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="interfaceChooser" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="marshaler" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="persistent" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Set if message exchanges issued by the component should be persistent or
not. This value will override the default one given on the
{@link org.apache.servicemix.jbi.container.JBIContainer#persistent}
attribute.
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="serviceChooser" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="subscriptions" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="tns:subscriptionSpec"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="component" type="xs:string"/>
      <xs:attribute name="componentName" type="xs:string"/>
      <xs:attribute name="destinationEndpoint" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            The destination endpoint
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="destinationInterface" type="xs:QName">
        <xs:annotation>
          <xs:documentation>
            The destination interface
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="destinationOperation" type="xs:QName">
        <xs:annotation>
          <xs:documentation>
            The destination operation name
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="destinationResolver" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Returns the destination resolver used to decide which destination the
container should route this component to.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="destinationService" type="xs:QName">
        <xs:annotation>
          <xs:documentation>
            The destination service name
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="destinationUri" type="xs:string"/>
      <xs:attribute name="endpoint" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Returns the endpoint name of this component
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="failIfNoDestinationEndpoint" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>
            Sets whether or not there should be a failure if there is no matching
endpoint for the service dispatch. It may be in a pure publish/subscribe
model you want all available subscribes to receive the message but do not
mind if there is not a single destination endpoint that can be found.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            The unique component ID
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="interfaceChooser" type="xs:string"/>
      <xs:attribute name="interfaceName" type="xs:QName"/>
      <xs:attribute name="marshaler" type="xs:string"/>
      <xs:attribute name="operation" type="xs:QName"/>
      <xs:attribute name="persistent" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set if message exchanges issued by the component should be persistent or
not. This value will override the default one given on the
{@link org.apache.servicemix.jbi.container.JBIContainer#persistent}
attribute.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="service" type="xs:QName">
        <xs:annotation>
          <xs:documentation>
            Returns the service of the component to register
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="serviceChooser" type="xs:string"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.jmx.AdminReadWritePolicy -->
  <xs:element name="adminReadWritePolicy">
    <xs:annotation>
      <xs:documentation>
        Policy implementation that grants read-write access to members of the 'admin' group
and read-only access to all other users.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.security.auth.impl.JAASAuthenticationService -->
  <xs:element name="authenticationService">
    <xs:annotation>
      <xs:documentation>
        Implementation of the authentication service using JAAS.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.security.acl.impl.AuthorizationEntry -->
  <xs:element name="authorizationEntry">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="acls" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="endpoint" type="xs:string"/>
      <xs:attribute name="operation" type="xs:QName"/>
      <xs:attribute name="roles" type="xs:string"/>
      <xs:attribute name="service" type="xs:string"/>
      <xs:attribute name="type" type="xs:string"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.security.acl.impl.DefaultAuthorizationMap -->
  <xs:element name="authorizationMap">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="authorizationEntries" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="defaultEntry" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="1">
              <xs:element ref="tns:authorizationEntry"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="defaultEntry" type="xs:string"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.client.ClientFactoryBean -->
  <xs:element name="client">
    <xs:annotation>
      <xs:documentation>
        A factory bean which creates a ServiceMixClient.
It first try to use the configured ClientFactory, the ComponentContext
then JBIContainer and at last, it tries to locate the ClientFactory
in JNDI under the provided name.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="container" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="1">
              <xs:element ref="tns:container"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="context" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="factory" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="container" type="xs:string"/>
      <xs:attribute name="context" type="xs:string"/>
      <xs:attribute name="factory" type="xs:string"/>
      <xs:attribute name="name" type="xs:string"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.container.SpringJBIContainer -->
  <xs:element name="container">
    <xs:annotation>
      <xs:documentation>
        The ServiceMix JBI Container
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="MBeanServer" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Set the MBeanServer
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="activationSpecs" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="tns:activationSpec"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="broker" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Set the Broker to use
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="1">
              <xs:element ref="tns:securedBroker"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="componentNames" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="components" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="deployArchives" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="deployments" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="tns:deployServiceAssembly"/>
              <xs:element ref="tns:installComponent"/>
              <xs:element ref="tns:installSharedLibrary"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="endpoints" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="executorFactory" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="flow" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Set the broker message flow
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="1">
              <xs:element ref="tns:jcaFlow"/>
              <xs:element ref="tns:jmsFlow"/>
              <xs:element ref="tns:jmsFlowTibco"/>
              <xs:element ref="tns:sedaFlow"/>
              <xs:element ref="tns:stFlow"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="flows" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Set the broker message flows
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="tns:jcaFlow"/>
              <xs:element ref="tns:jmsFlow"/>
              <xs:element ref="tns:jmsFlowTibco"/>
              <xs:element ref="tns:sedaFlow"/>
              <xs:element ref="tns:stFlow"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="listeners" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="namingContext" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Set the naming context
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="services" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="tns:dotViewService"/>
              <xs:element ref="tns:logService"/>
              <xs:element ref="tns:securedBroker"/>
              <xs:element ref="tns:statistics"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="transactionManager" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Set the transaction manager
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="MBeanServer" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set the MBeanServer
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="autoEnlistInTransaction" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>
            Retrieve the value for automatic transaction enlistment.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="broker" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set the Broker to use
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="components" type="xs:string"/>
      <xs:attribute name="createJmxConnector" type="xs:boolean"/>
      <xs:attribute name="createMBeanServer" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>
            Set the flag to create own MBeanServer if none supplied
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="deploymentDirPath" type="xs:string"/>
      <xs:attribute name="deploymentExtensions" type="xs:string"/>
      <xs:attribute name="embedded" type="xs:boolean"/>
      <xs:attribute name="endpoints" type="xs:string"/>
      <xs:attribute name="executorFactory" type="xs:string"/>
      <xs:attribute name="flow" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set the broker message flow
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="flowName" type="xs:string"/>
      <xs:attribute name="flowNames" type="xs:string"/>
      <xs:attribute name="forceShutdown" type="xs:long">
        <xs:annotation>
          <xs:documentation>
            Set the timeout (in ms) before a shutdown is forced by cancelling all pending exchanges.
The default value is 0 -- no forced shutdown
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="generateRootDir" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>
            Creates an auto-generated rootDir which is useful for integration testing
in JUnit test cases allowing installations of deployments inside an empty
installation of ServiceMix
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="generatedRootDirPrefix" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Sets the prefix used when auto-creating a rootDir property value
which is useful for integration testing inside JUnit test cases
letting each test case create its own empty servicemix install
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="installationDirPath" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set the installationDir - rge default location is root/&lt;container name&gt;/installation
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="monitorDeploymentDirectory" type="xs:boolean"/>
      <xs:attribute name="monitorInstallationDirectory" type="xs:boolean"/>
      <xs:attribute name="monitorInterval" type="xs:integer"/>
      <xs:attribute name="name" type="xs:string"/>
      <xs:attribute name="namingContext" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set the naming context
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="notifyStatistics" type="xs:boolean"/>
      <xs:attribute name="persistent" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>
            Set the new default value for exchange persistence.
This value will be the default if none is configured on
the activation spec of the component or on the message.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="rmiPort" type="xs:integer"/>
      <xs:attribute name="rootDir" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set the workspace root
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="subscriptionFlowName" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set the subscription flow name
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="transactionManager" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set the transaction manager
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="useMBeanServer" type="xs:boolean"/>
      <xs:attribute name="useNewTransactionModel" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>
            Sets whether the new transaction model should be used.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="useShutdownHook" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>
            Sets whether or not we should use a shutdown handler to close down the
broker cleanly if the JVM is terminated. It is recommended you leave this
enabled.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.container.DeployServiceAssembly -->
  <xs:element name="deployServiceAssembly">
    <xs:annotation>
      <xs:documentation>
        Deploys a service assembly
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="commandsService" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="jbiContainer" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="1">
              <xs:element ref="tns:container"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="artifactId" type="xs:string"/>
      <xs:attribute name="commandsService" type="xs:string"/>
      <xs:attribute name="deferException" type="xs:boolean"/>
      <xs:attribute name="file" type="xs:string"/>
      <xs:attribute name="groupId" type="xs:string"/>
      <xs:attribute name="homeDir" type="xs:string"/>
      <xs:attribute name="jbiContainer" type="xs:string"/>
      <xs:attribute name="repositoryDir" type="xs:string"/>
      <xs:attribute name="serviceAssemblyName" type="xs:string"/>
      <xs:attribute name="type" type="xs:string"/>
      <xs:attribute name="version" type="xs:string"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.view.DotViewEndpointListener -->
  <xs:element name="dotViewEndpointListener">
    <xs:annotation>
      <xs:documentation>
        Generates DOT visualisations of the components and endpoints available inside ServiceMix
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="container" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="1">
              <xs:element ref="tns:container"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="container" type="xs:string"/>
      <xs:attribute name="file" type="xs:string"/>
      <xs:attribute name="rerenderOnChange" type="xs:boolean"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.view.DotViewFlowListener -->
  <xs:element name="dotViewFlowListener">
    <xs:annotation>
      <xs:documentation>
        Generates DOT visualisations of the exchanges flow inside ServiceMix
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="container" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="1">
              <xs:element ref="tns:container"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="container" type="xs:string"/>
      <xs:attribute name="displayComponents" type="xs:boolean"/>
      <xs:attribute name="file" type="xs:string"/>
      <xs:attribute name="rerenderOnChange" type="xs:boolean"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.view.DotViewService -->
  <xs:element name="dotViewService">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="container" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="1">
              <xs:element ref="tns:container"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="autoStart" type="xs:boolean"/>
      <xs:attribute name="container" type="xs:string"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.container.InstallComponent -->
  <xs:element name="installComponent">
    <xs:annotation>
      <xs:documentation>
        Installs a shared library
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="commandsService" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="jbiContainer" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="1">
              <xs:element ref="tns:container"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="properties" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="artifactId" type="xs:string"/>
      <xs:attribute name="commandsService" type="xs:string"/>
      <xs:attribute name="componentName" type="xs:string"/>
      <xs:attribute name="deferException" type="xs:boolean"/>
      <xs:attribute name="file" type="xs:string"/>
      <xs:attribute name="groupId" type="xs:string"/>
      <xs:attribute name="homeDir" type="xs:string"/>
      <xs:attribute name="jbiContainer" type="xs:string"/>
      <xs:attribute name="properties" type="xs:string"/>
      <xs:attribute name="repositoryDir" type="xs:string"/>
      <xs:attribute name="type" type="xs:string"/>
      <xs:attribute name="version" type="xs:string"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.container.InstallSharedLibrary -->
  <xs:element name="installSharedLibrary">
    <xs:annotation>
      <xs:documentation>
        Installs a shared library
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="commandsService" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="jbiContainer" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="1">
              <xs:element ref="tns:container"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="artifactId" type="xs:string"/>
      <xs:attribute name="commandsService" type="xs:string"/>
      <xs:attribute name="deferException" type="xs:boolean"/>
      <xs:attribute name="file" type="xs:string"/>
      <xs:attribute name="groupId" type="xs:string"/>
      <xs:attribute name="homeDir" type="xs:string"/>
      <xs:attribute name="jbiContainer" type="xs:string"/>
      <xs:attribute name="repositoryDir" type="xs:string"/>
      <xs:attribute name="type" type="xs:string"/>
      <xs:attribute name="version" type="xs:string"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.nmr.flow.jca.JCAFlow -->
  <xs:element name="jcaFlow">
    <xs:annotation>
      <xs:documentation>
        Use for message routing among a network of containers. All
routing/registration happens automatically.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="connectionFactory" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Returns the ConnectionFactory for this flow
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="connectionManager" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="broadcastDestinationName" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Returns the Broadcast Destination Name for this flow
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="connectionFactory" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Returns the ConnectionFactory for this flow
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="connectionManager" type="xs:string"/>
      <xs:attribute name="jmsURL" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Returns the JMS URL for this flow
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Get the name of the item
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="password" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set the password to use in JMS connections.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="userName" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Sets the userName to use in JMS connections.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.nmr.flow.jms.JMSFlow -->
  <xs:element name="jmsFlow">
    <xs:annotation>
      <xs:documentation>
        Use for message routing among a network of containers. All
routing/registration happens automatically.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="connectionFactory" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="broadcastDestinationName" type="xs:string"/>
      <xs:attribute name="connectionFactory" type="xs:string"/>
      <xs:attribute name="jmsURL" type="xs:string"/>
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Get the name of the item
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="password" type="xs:string"/>
      <xs:attribute name="userName" type="xs:string"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.nmr.flow.jms.JMSFlowTibco -->
  <xs:element name="jmsFlowTibco">
    <xs:annotation>
      <xs:documentation>
        Use for message routing among a network of containers. All
routing/registration happens automatically.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="connectionFactory" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="broadcastDestinationName" type="xs:string"/>
      <xs:attribute name="connectionFactory" type="xs:string"/>
      <xs:attribute name="jmsURL" type="xs:string"/>
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Get the name of the item
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="password" type="xs:string"/>
      <xs:attribute name="userName" type="xs:string"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.jmx.ConnectorServerFactoryBean -->
  <xs:element name="jmxConnector">
    <xs:annotation>
      <xs:documentation>
        &lt;code&gt;FactoryBean&lt;/code&gt; that creates a JSR-160 &lt;code&gt;JMXConnectorServer&lt;/code&gt;,
optionally registers it with the &lt;code&gt;MBeanServer&lt;/code&gt; and then starts it.

&lt;p&gt;The &lt;code&gt;JMXConnectorServer&lt;/code&gt; can be started in a separate thread by setting the
&lt;code&gt;threaded&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt;. You can configure this thread to be a
daemon thread by setting the &lt;code&gt;daemon&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt;.

This xbean-enabled factory is a wrapper on top of the existing Spring
factory bean. It also logs the serviceUrl when starting.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="environment" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Set the environment properties used to construct the &lt;code&gt;JMXConnector&lt;/code&gt;
as a &lt;code&gt;Map&lt;/code&gt; of String keys and arbitrary Object values.
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="policy" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="1">
              <xs:element ref="tns:adminReadWritePolicy"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="server" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Specify the &lt;code&gt;MBeanServer&lt;/code&gt; instance with which all beans should
be registered. The &lt;code&gt;MBeanExporter&lt;/code&gt; will attempt to locate an
existing &lt;code&gt;MBeanServer&lt;/code&gt; if none is supplied.
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="daemon" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>
            Set whether any threads started for the &lt;code&gt;JMXConnectorServer&lt;/code&gt; should be
started as daemon threads.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="environment" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set the environment properties used to construct the &lt;code&gt;JMXConnector&lt;/code&gt;
as a &lt;code&gt;Map&lt;/code&gt; of String keys and arbitrary Object values.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="objectName" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set the &lt;code&gt;ObjectName&lt;/code&gt; used to register the &lt;code&gt;JMXConnectorServer&lt;/code&gt;
itself with the &lt;code&gt;MBeanServer&lt;/code&gt;.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="policy" type="xs:string"/>
      <xs:attribute name="registrationBehavior" type="xs:integer">
        <xs:annotation>
          <xs:documentation>
            Specify what action should be taken when attempting to register an MBean
under an {@link javax.management.ObjectName} that already exists.
&lt;p&gt;Default is REGISTRATION_FAIL_ON_EXISTING.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="registrationBehaviorName" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set the registration behavior by the name of the corresponding constant,
e.g. "REGISTRATION_IGNORE_EXISTING".
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="server" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Specify the &lt;code&gt;MBeanServer&lt;/code&gt; instance with which all beans should
be registered. The &lt;code&gt;MBeanExporter&lt;/code&gt; will attempt to locate an
existing &lt;code&gt;MBeanServer&lt;/code&gt; if none is supplied.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="serviceUrl" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set the service URL for the &lt;code&gt;JMXConnectorServer&lt;/code&gt;.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="threaded" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>
            Set whether the &lt;code&gt;JMXConnectorServer&lt;/code&gt; should be started in a separate thread.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.jmx.JaasAuthenticator -->
  <xs:element name="jmxJaasAuthenticator">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="authenticationService" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              The authentication service can be used to customize the authentication
mechanism used by this authenticator. It defaults to a
JAASAuthenticationService which delegates calls to the JAAS layer.
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="1">
              <xs:element ref="tns:authenticationService"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="authenticationService" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            The authentication service can be used to customize the authentication
mechanism used by this authenticator. It defaults to a
JAASAuthenticationService which delegates calls to the JAAS layer.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="domain" type="xs:string"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.jmx.PasswordAuthenticatorFactoryBean -->
  <xs:element name="jmxPasswordAuthenticator">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="passwords" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="passwords" type="xs:string"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.jmx.MBeanServerFactoryBean -->
  <xs:element name="jmxServer">
    <xs:complexType>
      <xs:attribute name="agentId" type="xs:string"/>
      <xs:attribute name="defaultDomain" type="xs:string"/>
      <xs:attribute name="locateExistingServerIfPossible" type="xs:boolean"/>
      <xs:attribute name="registerWithFactory" type="xs:boolean"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.security.keystore.impl.FileKeystoreInstance -->
  <xs:element name="keystore">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="path" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="keyPasswords" type="xs:string"/>
      <xs:attribute name="keystorePassword" type="xs:string"/>
      <xs:attribute name="name" type="xs:string"/>
      <xs:attribute name="path" type="xs:string"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.security.keystore.impl.BaseKeystoreManager -->
  <xs:element name="keystoreManager">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="keystores" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="tns:keystore"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.logging.LogService -->
  <xs:element name="logService">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="container" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="1">
              <xs:element ref="tns:container"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="autoStart" type="xs:boolean"/>
      <xs:attribute name="configUrl" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            set new location for log4j config
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="container" type="xs:string"/>
      <xs:attribute name="refreshPeriod" type="xs:integer"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.jmx.RmiRegistryFactoryBean -->
  <xs:element name="rmiRegistry">
    <xs:complexType>
      <xs:attribute name="create" type="xs:boolean"/>
      <xs:attribute name="locate" type="xs:boolean"/>
      <xs:attribute name="port" type="xs:integer"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.security.SecuredBroker -->
  <xs:element name="securedBroker">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="authorizationMap" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="1">
              <xs:element ref="tns:authorizationMap"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="defaultFlowChooser" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="defaultInterfaceChooser" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Set the default EndpointChooser
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="defaultServiceChooser" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Set default EndpointChooser
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="flows" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Set the flow
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="tns:jcaFlow"/>
              <xs:element ref="tns:jmsFlow"/>
              <xs:element ref="tns:jmsFlowTibco"/>
              <xs:element ref="tns:sedaFlow"/>
              <xs:element ref="tns:stFlow"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="subscriptionManager" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Sets the subscription manager
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="authorizationMap" type="xs:string"/>
      <xs:attribute name="defaultFlowChooser" type="xs:string"/>
      <xs:attribute name="defaultInterfaceChooser" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set the default EndpointChooser
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="defaultServiceChooser" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set default EndpointChooser
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="flowNames" type="xs:string"/>
      <xs:attribute name="subscriptionFlowName" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Set the subscription flow name
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="subscriptionManager" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Sets the subscription manager
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow -->
  <xs:element name="sedaFlow">
    <xs:annotation>
      <xs:documentation>
        The SedaFlow introduces a simple event staging between the internal processes
in the NMR Broker. A Seda flow (the default) is suited for general deployment,
as the additional staging is well suited buffering exchanges between heavily
routed to components (where state may be being used) for example.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Get the name of the item
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.container.SpringServiceUnitContainer -->
  <xs:element name="serviceunit">
    <xs:annotation>
      <xs:documentation>
        A deployable service unit container
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="activationSpecs" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="tns:activationSpec"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="components" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="endpoints" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="listeners" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="services" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="tns:dotViewService"/>
              <xs:element ref="tns:logService"/>
              <xs:element ref="tns:securedBroker"/>
              <xs:element ref="tns:statistics"/>
              <xs:any namespace="##other"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="components" type="xs:string"/>
      <xs:attribute name="endpoints" type="xs:string"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.nmr.flow.st.STFlow -->
  <xs:element name="stFlow">
    <xs:annotation>
      <xs:documentation>
        A simple Straight through flow.

A MessageExchange is routed straight to it's destination with
no staging or buffering. A straight through flow is best suited
for the cases where the ServiceMix JBIContainer is deployed with simple
flows (no state) or embedding, or where latency needs to be as low as possible.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Get the name of the item
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.monitoring.StatisticsService -->
  <xs:element name="statistics">
    <xs:complexType>
      <xs:attribute name="dumpStats" type="xs:boolean"/>
      <xs:attribute name="statsInterval" type="xs:long"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.container.SubscriptionSpec -->
  <xs:element name="subscriptionSpec">
    <xs:annotation>
      <xs:documentation>
        Represents a subscription to a JBI endpoint.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="filter" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="name" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="1"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="endpoint" type="xs:string"/>
      <xs:attribute name="filter" type="xs:string"/>
      <xs:attribute name="interfaceName" type="xs:QName"/>
      <xs:attribute name="name" type="xs:string"/>
      <xs:attribute name="operation" type="xs:QName"/>
      <xs:attribute name="service" type="xs:QName"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.jbi.util.SystemProperties -->
  <xs:element name="systemProperties">
    <xs:annotation>
      <xs:documentation>
        Spring bean for initializing system properties.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="properties" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded"><xs:any minOccurs="0" maxOccurs="unbounded"/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="properties" type="xs:string"/>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:anyAttribute namespace="##other" processContents="lax"/>
    </xs:complexType>
  </xs:element>


</xs:schema>