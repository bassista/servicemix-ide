<?xml version='1.0'?>
<!-- NOTE: this file is autogenerated by Apache XBean -->

<xs:schema elementFormDefault='qualified'
           targetNamespace='http://servicemix.apache.org/file/1.0'
           xmlns:xs='http://www.w3.org/2001/XMLSchema'
           xmlns:tns='http://servicemix.apache.org/file/1.0'>

  <!-- element for type: org.apache.servicemix.file.FileComponent -->
  <xs:element name='component'>
    <xs:annotation>
      <xs:documentation><![CDATA[
        a JBI component that interacts with the file system. It hosts endpoints that reads data from and writes data to the file system.
      ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name='component' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:choice minOccurs='0' maxOccurs='1'>
              <xs:element ref='tns:component'/>
              <xs:any namespace='##other'/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name='endpoints' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              a list of beans defining the endpoints hosted by the component
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:choice minOccurs='0' maxOccurs='unbounded'>
              <xs:element ref='tns:poller'/>
              <xs:element ref='tns:sender'/>
              <xs:any namespace='##other'/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name='executor' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='executorFactory' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace='##other' minOccurs='0' maxOccurs='unbounded'/>
      </xs:sequence>
      <xs:attribute name='component' type='xs:string'/>
      <xs:attribute name='currentState' type='xs:string'/>
      <xs:attribute name='executor' type='xs:string'/>
      <xs:attribute name='executorFactory' type='xs:string'/>
      <xs:attribute name='id' type='xs:ID'/>
      <xs:anyAttribute namespace='##other' processContents='lax'/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.file.FilePollerEndpoint -->
  <xs:element name='poller'>
    <xs:annotation>
      <xs:documentation><![CDATA[
        A polling endpoint that looks for a file or files in a directory and sends
the files to a target service (via the JBI bus), deleting the files by
default when they are processed. The polling endpoint uses a file marshaler
to send the data as a JBI message; be default this marshaler expects XML
payload. For non-XML payload, e.g. plain-text or binary files, use an
alternative marshaler such as the
<code>org.apache.servicemix.components.util.BinaryFileMa
      ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name='component' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:choice minOccurs='0' maxOccurs='1'>
              <xs:element ref='tns:component'/>
              <xs:any namespace='##other'/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name='definition' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='description' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              an XML document describing the endpoint
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='filter' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              Bean defining the class implementing the file filtering strategy. This
bean must be an implementation of the <code>java.io.FileFilter</code>
interface.
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='lockManager' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              Bean defining the class implementing the file locking strategy. This bean
must be an implementation of the
<code>org.apache.servicemix.locks.LockManager</code> interface. By
default, this will be set to an instances of
<code>org.apache.servicemix.common.locks.impl.SimpleLockManager</code>.
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='marshaler' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              Specifies a <code>FileMarshaler</code> object that will marshal file data
into the NMR. The default file marshaller can read valid XML data.
<code>FileMarshaler</code> objects are implementations of
<code>org.apache.servicemix.components.util.FileMarshaler</code>.
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='scheduler' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='serviceUnit' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              the service unit responsible for the endpoint
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace='##other' minOccurs='0' maxOccurs='unbounded'/>
      </xs:sequence>
      <xs:attribute name='archive' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Specifies a directory relative to the polling directory to which
processed files are archived.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='autoCreateDirectory' type='xs:boolean'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Specifies if the endpoint should create the target directory, if it does
not already exist. If you set this to <code>false</code> and the directory does
not exist, the endpoint will not do anything. Default value is <code>true</code>.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='component' type='xs:string'/>
      <xs:attribute name='concurrentPolling' type='xs:boolean'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Sets whether more than one poll can be active at a time (true means yes). Default value is <code>false</code>.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='definition' type='xs:string'/>
      <xs:attribute name='delay' type='xs:long'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Sets the amount of time in milliseconds that the endpoint should wait before making the first poll.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='deleteFile' type='xs:boolean'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Specifies if files should be deleted after they are processed. Default value is <code>true</code>.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='description' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            an XML document describing the endpoint
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='endpoint' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            the name of the endpoint
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='file' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Specifies the file or directory to be polled. If it is a directory, all
files in the directory or its sub-directories will be processed by the
endpoint. If it is a file, only files matching the filename will be
processed."
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='filter' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Bean defining the class implementing the file filtering strategy. This
bean must be an implementation of the <code>java.io.FileFilter</code>
interface.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='firstTime' type='xs:date'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Sets the date on which the first poll will be executed. If a delay is
also set using <code>setDelay</code>, the delay interval will be added
after the date specified.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='interfaceName' type='xs:QName'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            the QName of the interface exposed by the endpoint
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='lockManager' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Bean defining the class implementing the file locking strategy. This bean
must be an implementation of the
<code>org.apache.servicemix.locks.LockManager</code> interface. By
default, this will be set to an instances of
<code>org.apache.servicemix.common.locks.impl.SimpleLockManager</code>.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='marshaler' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Specifies a <code>FileMarshaler</code> object that will marshal file data
into the NMR. The default file marshaller can read valid XML data.
<code>FileMarshaler</code> objects are implementations of
<code>org.apache.servicemix.components.util.FileMarshaler</code>.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='period' type='xs:long'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Sets the number of milliseconds between polling attempts.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='recursive' type='xs:boolean'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Specifies if sub-directories are polled; if false then the poller will
only poll the specified directory. If the endpoint is configured to poll
for a specific file rather than a directory then this attribute is
ignored. Default is <code>true</code>.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='scheduler' type='xs:string'/>
      <xs:attribute name='service' type='xs:QName'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            the QName of the service exposed by the endpoint
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='serviceUnit' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            the service unit responsible for the endpoint
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='targetEndpoint' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            the name of the endpoint to which requests are sent
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='targetInterface' type='xs:QName'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            the QName of the interface to which requests are sent
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='targetOperation' type='xs:QName'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            the QName of the operation to which requests are sent
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='targetService' type='xs:QName'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            the QName of the service to which requests are sent
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='targetUri' type='xs:string'/>
      <xs:attribute name='id' type='xs:ID'/>
      <xs:anyAttribute namespace='##other' processContents='lax'/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.file.FileSenderEndpoint -->
  <xs:element name='sender'>
    <xs:annotation>
      <xs:documentation><![CDATA[
        An endpoint which receives messages from the NMR and writes the message to the file system.
      ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name='component' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:choice minOccurs='0' maxOccurs='1'>
              <xs:element ref='tns:component'/>
              <xs:any namespace='##other'/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name='definition' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='description' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              an XML document describing the endpoint
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='marshaler' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              Specifies a <code>FileMarshaler</code> object that will marshal message
data from the NMR into a file. The default file marshaler can write
valid XML data. <code>FileMarshaler</code> objects are implementations of
<code>org.apache.servicemix.components.util.FileMarshaler</code>.
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='serviceUnit' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              the service unit responsible for the endpoint
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace='##other' minOccurs='0' maxOccurs='unbounded'/>
      </xs:sequence>
      <xs:attribute name='append' type='xs:boolean'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Specifies if the endpoint appends data to existing files or if it will
overwrite existing files. The default is for the endpoint to overwrite
existing files. Setting this to <code>true</code> instructs the endpoint
to append data. Default value is <code>false</code>.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='autoCreateDirectory' type='xs:boolean'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Specifies if the endpoint should create the target directory if it does
not exist. If you set this to <code>false</code> and the directory does
not exist, the endpoint will not do anything. Default value: <code>true</code>.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='component' type='xs:string'/>
      <xs:attribute name='definition' type='xs:string'/>
      <xs:attribute name='description' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            an XML document describing the endpoint
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='directory' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Specifies the directory where the endpoint writes files.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='endpoint' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            the name of the endpoint
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='interfaceName' type='xs:QName'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            the QName of the interface exposed by the endpoint
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='marshaler' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Specifies a <code>FileMarshaler</code> object that will marshal message
data from the NMR into a file. The default file marshaler can write
valid XML data. <code>FileMarshaler</code> objects are implementations of
<code>org.apache.servicemix.components.util.FileMarshaler</code>.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='service' type='xs:QName'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            the QName of the service exposed by the endpoint
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='serviceUnit' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            the service unit responsible for the endpoint
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='tempFilePrefix' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Specifies a string to prefix to the beginning of generated temporary file
names. Temporary file names are generated when the endpoint cannot
determine the name of the file from the message.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='tempFileSuffix' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            Specifies a string to append to generated temporary file names. Temporary
file names are generated when the endpoint cannot determine the name of
the file from the message.
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='id' type='xs:ID'/>
      <xs:anyAttribute namespace='##other' processContents='lax'/>
    </xs:complexType>
  </xs:element>


</xs:schema>
