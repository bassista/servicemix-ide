<?xml version='1.0'?>
<!-- NOTE: this file is autogenerated by Apache XBean -->

<xs:schema elementFormDefault='qualified'
           targetNamespace='http://servicemix.apache.org/mail/1.0'
           xmlns:xs='http://www.w3.org/2001/XMLSchema'
           xmlns:tns='http://servicemix.apache.org/mail/1.0'>

  <!-- element for type: org.apache.servicemix.mail.MailComponent -->
  <xs:element name='component'>
    <xs:annotation>
      <xs:documentation><![CDATA[
        Mail Component
      ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name='endpoints' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:choice minOccurs='0' maxOccurs='unbounded'>
              <xs:element ref='tns:poller'/>
              <xs:element ref='tns:sender'/>
              <xs:any namespace='##other'/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name='executor' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='executorFactory' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace='##other' minOccurs='0' maxOccurs='unbounded'/>
      </xs:sequence>
      <xs:attribute name='executor' type='xs:string'/>
      <xs:attribute name='executorFactory' type='xs:string'/>
      <xs:attribute name='id' type='xs:ID'/>
      <xs:anyAttribute namespace='##other' processContents='lax'/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.mail.MailPollerEndpoint -->
  <xs:element name='poller'>
    <xs:annotation>
      <xs:documentation><![CDATA[
        This is the polling endpoint for the mail component.
      ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name='customProperties' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              <p>Specifies a <code>java.util.Map</code> which may contain additional
properties for the connection. <br/>
<br/><b><u>Example for disabling TOP for POP3 headers:</u></b><br />
&nbsp;<i><b>key</b>: "mail.pop3.disabletop"</i> <br />
&nbsp;<i><b>value</b>: "true"</i></p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>null</b></i><br/><br/>
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='unbounded'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='definition' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='description' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='marshaler' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              <p>With this method you can specify a marshaler class which provides the
logic for converting a mail into a normalized message. This class has
to extend the abstract class <code>AbstractMailMarshaler</code> or an
extending class. If you don't specify a marshaler, the
<code>DefaultMailMarshaler</code> will be used.</p>
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='scheduler' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='serviceUnit' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='storage' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              <p>Specifies a <code>org.apache.servicemix.store.Store</code> object which
will be used for storing the identifications of already processed messages.<br/>
<b>This store is only used with the POP3 protocol and if unseen mails are
processed only.</b></p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>null</b></i><br/><br/>
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace='##other' minOccurs='0' maxOccurs='unbounded'/>
      </xs:sequence>
      <xs:attribute name='concurrentPolling' type='xs:boolean'/>
      <xs:attribute name='connection' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>Specifies the connection URI used to connect to a mail server.
<br /><br />
<b><u>Templates:</u></b> <br />
&nbsp;&nbsp;&nbsp;<i>&lt;protocol&gt;://&lt;user&gt;@&lt;host&gt;[:&lt;port&gt;][/&lt;folder&gt;]?password=&lt;password&gt;</i>
<br /><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OR</b><br/>
&nbsp;&nbsp;&nbsp;<i>&lt;protocol&gt;://&lt;host&gt;[:&lt;port&gt;][/&lt;folder&gt;]?user=&lt;user&gt;;password=&lt;password&gt;</i>
<br /><br />
<b><u>Details:</u></b><br /><br/>
<table border="0" cellpadding="0" cellspacing="0">
<tr>
<td width="40%" align="left"><b><u>Name</u></b></td>
<td width="60%" align="left"><b><u>Description</u></b></td>
</tr>
<tr>
<td>protocol</td>
<td>the protocol to use (example: pop3 or imap)</td>
</tr>
<tr>
<td>user</td>
<td>the user name used to log into an account</td>
</tr>
<tr>
<td>host</td>
<td>the name or ip address of the mail server</td>
</tr>
<tr>
<td>port</td>
<td>the port number to use (optional)</td>
</tr>
<tr>
<td>folder</td>
<td>the folder to poll from (optional)</td>
</tr>
<tr>
<td>password</td>
<td>the password for the login</td>
</tr>
</table>
<br/>
<b><u>Examples:</u></b><br />
&nbsp;&nbsp;&nbsp;<i>imap://lhein@imapserver:143/INBOX?password=mypass</i><br />
&nbsp;&nbsp;&nbsp;<i>pop3://pop3server/INBOX?user=me@myhome.org;password=mypass</i></p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>null</b></i><br/><br/>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='customProperties' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>Specifies a <code>java.util.Map</code> which may contain additional
properties for the connection. <br/>
<br/><b><u>Example for disabling TOP for POP3 headers:</u></b><br />
&nbsp;<i><b>key</b>: "mail.pop3.disabletop"</i> <br />
&nbsp;<i><b>value</b>: "true"</i></p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>null</b></i><br/><br/>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='customTrustManagers' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>Specifies one or more trust manager classes separated by a semicolon (<b>;</b>).<br/>
These classes have to implement the <code>Trustmanager</code> interface and need to provide
an empty default constructor to be valid.<br/><br />
If you want to accept all security certificates without a check you may
consider using the <code>DummyTrustManager</code> class. It is actually only
an empty stub without any checking logic. <br/><b>But be aware that this will be
a security risk in production environments. </b></p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>null</b></i><br/><br/>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='debugMode' type='xs:boolean'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>Specifies if the JavaMail is run in <code>DEBUG</code> mode. This means
that while connecting to server and processing mails a detailed log
is written to debug output. <br />
This mode is very handy if you are experiencing problems with your
mail server connection and you want to find out what is going wrong
in communication with the server.
<br /><br />
&nbsp;&nbsp;&nbsp;<b>true</b> - <i>the debug mode is <b>enabled</b></i>
<br />
&nbsp;&nbsp;&nbsp;<b>false</b> - <i>the debug mode is <b>disabled</b></i></p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>false</b></i><br/><br/>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='definition' type='xs:string'/>
      <xs:attribute name='delay' type='xs:long'/>
      <xs:attribute name='deleteProcessedMessages' type='xs:boolean'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>This flag is used to indicate what happens to a processed mail polled
from a mail folder. If it is set to <code>true</code> the mail will
be deleted after it was sent into the bus successfully. If set to
<code>false</code> the mail will reside inside the mail folder but will
be marked as already seen.<br/>
If the sending of the mail results in an error, the mail will not be
deleted / marked and reprocessed on next run of the polling cycle.<p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>false</b></i>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='description' type='xs:string'/>
      <xs:attribute name='endpoint' type='xs:string'/>
      <xs:attribute name='firstTime' type='xs:date'/>
      <xs:attribute name='interfaceName' type='xs:QName'/>
      <xs:attribute name='marshaler' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>With this method you can specify a marshaler class which provides the
logic for converting a mail into a normalized message. This class has
to extend the abstract class <code>AbstractMailMarshaler</code> or an
extending class. If you don't specify a marshaler, the
<code>DefaultMailMarshaler</code> will be used.</p>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='maxFetchSize' type='xs:integer'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>This sets the maximum amount of mails to process within one polling cycle.
If the maximum amount is reached all other mails in "unseen" state will
be skipped.</p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>-1 (unlimited)</b></i><br/><br/>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='period' type='xs:long'/>
      <xs:attribute name='processOnlyUnseenMessages' type='xs:boolean'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>This flag is used to indicate whether all mails are polled from a
mail folder or only the unseen mails are processed.<br/><br />
If it is set to <b><code>true</code></b> only the unseen mails will be
processed.<br />
If it is set to <b><code>false</code></b> all mails will be processed.<br/></p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>true</b></i><br/><br/>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='scheduler' type='xs:string'/>
      <xs:attribute name='service' type='xs:QName'/>
      <xs:attribute name='serviceUnit' type='xs:string'/>
      <xs:attribute name='storage' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>Specifies a <code>org.apache.servicemix.store.Store</code> object which
will be used for storing the identifications of already processed messages.<br/>
<b>This store is only used with the POP3 protocol and if unseen mails are
processed only.</b></p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>null</b></i><br/><br/>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='targetEndpoint' type='xs:string'/>
      <xs:attribute name='targetInterface' type='xs:QName'/>
      <xs:attribute name='targetOperation' type='xs:QName'/>
      <xs:attribute name='targetService' type='xs:QName'/>
      <xs:attribute name='targetUri' type='xs:string'/>
      <xs:attribute name='id' type='xs:ID'/>
      <xs:anyAttribute namespace='##other' processContents='lax'/>
    </xs:complexType>
  </xs:element>


  <!-- element for type: org.apache.servicemix.mail.MailSenderEndpoint -->
  <xs:element name='sender'>
    <xs:annotation>
      <xs:documentation><![CDATA[
        this is the sending endpoint for the mail component
      ]]></xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name='customProperties' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              <p>Specifies a <code>java.util.Map</code> which may contain additional
properties for the connection. <br/>
<br/><b><u>Example for disabling TOP for POP3 headers:</u></b><br />
&nbsp;<i><b>key</b>: "mail.pop3.disabletop"</i> <br />
&nbsp;<i><b>value</b>: "true"</i></p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>null</b></i><br/><br/>
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='unbounded'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='definition' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='description' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='ignoreMessageProperties' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              <p>Specifies a <code>java.util.List</code> which may contain message
properties to skip. <br/>
<br/><b><u>Example for skipping all kind of addresses from the normalized message:</u></b><br />
&nbsp;<i><b>value</b>: "org.apache.servicemix.mail.to"</i> <br />
&nbsp;<i><b>value</b>: "org.apache.servicemix.mail.cc"</i> <br />
&nbsp;<i><b>value</b>: "org.apache.servicemix.mail.bcc"</i> <br />
&nbsp;<i><b>value</b>: "org.apache.servicemix.mail.from"</i> <br />
&nbsp;<i><b>value</b>: "org.apache.servicemix.mail.replyto"</i> <br /></p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>null</b></i><br/><br/>
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='unbounded'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='marshaler' minOccurs='0' maxOccurs='1'>
          <xs:annotation>
            <xs:documentation><![CDATA[
              <p>With this method you can specify a marshaler class which provides the
logic for converting a normalized message into a mail. This class has
to extend the abstract class <code>AbstractMailMarshaler</code> or an
extending class. If you don't specify a marshaler, the
<code>DefaultMailMarshaler</code> will be used.</p>
            ]]></xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name='serviceUnit' minOccurs='0' maxOccurs='1'>
          <xs:complexType>
            <xs:sequence minOccurs='0' maxOccurs='1'><xs:any namespace='##other'/></xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:any namespace='##other' minOccurs='0' maxOccurs='unbounded'/>
      </xs:sequence>
      <xs:attribute name='connection' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>Specifies the connection URI used to connect to a mail server.
<br /><br />
<b><u>Templates:</u></b> <br />
&nbsp;&nbsp;&nbsp;<i>&lt;protocol&gt;://&lt;user&gt;@&lt;host&gt;[:&lt;port&gt;][/&lt;folder&gt;]?password=&lt;password&gt;</i>
<br /><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OR</b><br/>
&nbsp;&nbsp;&nbsp;<i>&lt;protocol&gt;://&lt;host&gt;[:&lt;port&gt;][/&lt;folder&gt;]?user=&lt;user&gt;;password=&lt;password&gt;</i>
<br /><br />
<b><u>Details:</u></b><br /><br/>
<table border="0" cellpadding="0" cellspacing="0">
<tr>
<td width="40%" align="left"><b><u>Name</u></b></td>
<td width="60%" align="left"><b><u>Description</u></b></td>
</tr>
<tr>
<td>protocol</td>
<td>the protocol to use (example: pop3 or imap)</td>
</tr>
<tr>
<td>user</td>
<td>the user name used to log into an account</td>
</tr>
<tr>
<td>host</td>
<td>the name or ip address of the mail server</td>
</tr>
<tr>
<td>port</td>
<td>the port number to use (optional)</td>
</tr>
<tr>
<td>folder</td>
<td>the folder to poll from (optional)</td>
</tr>
<tr>
<td>password</td>
<td>the password for the login</td>
</tr>
</table>
<br/>
<b><u>Example:</u></b><br />
&nbsp;&nbsp;&nbsp;<i>smtp://lhein@myserver?password=myPass</i><br /></p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>null</b></i><br/><br/>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='customProperties' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>Specifies a <code>java.util.Map</code> which may contain additional
properties for the connection. <br/>
<br/><b><u>Example for disabling TOP for POP3 headers:</u></b><br />
&nbsp;<i><b>key</b>: "mail.pop3.disabletop"</i> <br />
&nbsp;<i><b>value</b>: "true"</i></p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>null</b></i><br/><br/>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='customTrustManagers' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>Specifies one or more trust manager classes separated by a semicolon (<b>;</b>).<br/>
These classes have to implement the <code>Trustmanager</code> interface and need to provide
an empty default constructor to be valid.<br/><br />
If you want to accept all security certificates without a check you may
consider using the <code>DummyTrustManager</code> class. It is actually only
an empty stub without any checking logic. <br/><b>But be aware that this will be
a security risk in production environments. </b></p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>null</b></i><br/><br/>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='debugMode' type='xs:boolean'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>Specifies if the JavaMail is run in <code>DEBUG</code> mode. This means
that while connecting to server and processing mails a detailed log
is written to debug output. <br />
This mode is very handy if you are experiencing problems with your
mail server connection and you want to find out what is going wrong
in communication with the server.
<br /><br />
&nbsp;&nbsp;&nbsp;<b>true</b> - <i>the debug mode is <b>enabled</b></i>
<br />
&nbsp;&nbsp;&nbsp;<b>false</b> - <i>the debug mode is <b>disabled</b></i></p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>false</b></i><br/><br/>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='definition' type='xs:string'/>
      <xs:attribute name='description' type='xs:string'/>
      <xs:attribute name='endpoint' type='xs:string'/>
      <xs:attribute name='interfaceName' type='xs:QName'/>
      <xs:attribute name='marshaler' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>With this method you can specify a marshaler class which provides the
logic for converting a normalized message into a mail. This class has
to extend the abstract class <code>AbstractMailMarshaler</code> or an
extending class. If you don't specify a marshaler, the
<code>DefaultMailMarshaler</code> will be used.</p>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='receiver' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>Specifies the receiver address(es) of the mail which is being sent.</p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>null</b></i><br/><br/>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='sender' type='xs:string'>
        <xs:annotation>
          <xs:documentation><![CDATA[
            <p>Specifies the sender address of the mail which is being sent.</p>
<i>&nbsp;&nbsp;&nbsp;The default value is <b>no-reply@localhost</b></i><br/><br/>
          ]]></xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name='service' type='xs:QName'/>
      <xs:attribute name='serviceUnit' type='xs:string'/>
      <xs:attribute name='id' type='xs:ID'/>
      <xs:anyAttribute namespace='##other' processContents='lax'/>
    </xs:complexType>
  </xs:element>


</xs:schema>
